"""
–û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞
"""
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from typing import List
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from ..models import Tariff


def get_main_keyboard(is_admin: bool = False) -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞.
    
    Args:
        is_admin: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    """
    builder = ReplyKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    builder.add(
        KeyboardButton(text="üöÄ –ö—É–ø–∏—Ç—å VPN"),
        KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        KeyboardButton(text="üîë –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"),
        KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"),
        KeyboardButton(text="üì≤ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"),
        KeyboardButton(text="üí´ –ë–æ–Ω—É—Å—ã –∏ –∞–∫—Ü–∏–∏"),
        KeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
        KeyboardButton(text="‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ")
    )
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    if is_admin:
        builder.add(KeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    
    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ 2 —Å—Ç–æ–ª–±—Ü–∞
    builder.adjust(2)
    
    return builder.as_markup(resize_keyboard=True)


def get_tariffs_keyboard(tariffs: List[Tariff]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏"""
    buttons = []
    
    for tariff in tariffs:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        price_text = f"{tariff.price:.2f}".rstrip("0").rstrip(".") if tariff.price == int(tariff.price) else f"{tariff.price:.2f}"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏
        button_text = f"{tariff.name} - {price_text} —Ä—É–±."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –∫–æ–ª–±—ç–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç ID —Ç–∞—Ä–∏—Ñ–∞
        buttons.append([
            InlineKeyboardButton(text=button_text, callback_data=f"tariff:{tariff.id}")
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def payment_keyboard(payment_url: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã"""
    buttons = [
        [
            InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)
        ],
        [
            InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def support_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    buttons = [
        [
            InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", callback_data="create_ticket")
        ],
        [
            InlineKeyboardButton(text="üìã –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã", callback_data="my_tickets")
        ],
        [
            InlineKeyboardButton(text="üìö FAQ", callback_data="faq")
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def user_profile_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    buttons = [
        [
            InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_balance")
        ],
        [
            InlineKeyboardButton(text="üîë –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions")
        ],
        [
            InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="change_name")
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def tickets_list_keyboard(tickets, page=1, items_per_page=5) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∏–∫–µ—Ç–æ–≤ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = (len(tickets) + items_per_page - 1) // items_per_page
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(tickets))
    current_page_tickets = tickets[start_idx:end_idx]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
    ticket_buttons = [
        [InlineKeyboardButton(
            text=f"#{ticket.id} - {ticket.subject[:25]}{'...' if len(ticket.subject) > 25 else ''}",
            callback_data=f"ticket:{ticket.id}"
        )] for ticket in current_page_tickets
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    nav_buttons = []
    
    if total_pages > 1:
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"tickets_page:{page-1}"
            ))
        
        nav_buttons.append(InlineKeyboardButton(
            text=f"{page}/{total_pages}",
            callback_data="noop"
        ))
        
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(
                text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥",
                callback_data=f"tickets_page:{page+1}"
            ))
    
    if nav_buttons:
        ticket_buttons.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
    ticket_buttons.append([
        InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç", callback_data="create_ticket")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=ticket_buttons)


def ticket_action_keyboard(ticket_id: int, is_open: bool) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–∏–∫–µ—Ç–æ–º"""
    buttons = [
        [
            InlineKeyboardButton(text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_ticket:{ticket_id}")
        ]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è/–æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if is_open:
        buttons.append([
            InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"close_ticket:{ticket_id}")
        ])
    else:
        buttons.append([
            InlineKeyboardButton(text="üîÑ –û—Ç–∫—Ä—ã—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"reopen_ticket:{ticket_id}")
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ç–∏–∫–µ—Ç–æ–≤
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="my_tickets")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def cancel_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    buttons = [
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def instruction_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    buttons = [
        [
            InlineKeyboardButton(text="üì± Android", callback_data="instruction:android")
        ],
        [
            InlineKeyboardButton(text="üçé iOS", callback_data="instruction:ios")
        ],
        [
            InlineKeyboardButton(text="üñ•Ô∏è Windows", callback_data="instruction:windows")
        ],
        [
            InlineKeyboardButton(text="üçè macOS", callback_data="instruction:macos")
        ],
        [
            InlineKeyboardButton(text="üêß Linux", callback_data="instruction:linux")
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_back_to_main_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="main_menu"
        )
    )
    
    return builder.as_markup() 