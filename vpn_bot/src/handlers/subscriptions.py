from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from ..database import User
from ..services import VPNService, PaymentService
from ..keyboards import (
    get_user_keyboard, get_subscription_keyboard,
    get_callback_keyboard, get_payment_keyboard
)


router = Router()


@router.message(Command("subscriptions"))
@router.message(F.text == "üîë –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
async def cmd_subscriptions(message: Message, user: User, vpn_service: VPNService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscriptions"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscriptions = await vpn_service.get_user_subscriptions(user.user_id)
    
    if not subscriptions:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –î–ª—è –ø–æ–∫—É–ø–∫–∏ VPN –Ω–∞–∂–º–∏—Ç–µ 'üí∞ –ö—É–ø–∏—Ç—å VPN'."
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        "üîë <b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"
        "(–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)",
        reply_markup=get_user_keyboard(subscriptions),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("subscription:details:"))
async def subscription_details(callback: CallbackQuery, user: User, vpn_service: VPNService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ callback data
    subscription_id = int(callback.data.split(":")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscriptions = await vpn_service.get_user_subscriptions(user.user_id)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ ID
    subscription = next((s for s in subscriptions if s["subscription_id"] == subscription_id), None)
    
    if not subscription:
        await callback.answer("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
    status_emoji = "‚úÖ" if subscription["status"] == "active" else "‚è≥"
    
    text = (
        f"{status_emoji} <b>–ü–æ–¥–ø–∏—Å–∫–∞ #{subscription['subscription_id']}</b>\n\n"
        f"üìã –¢–∞—Ä–∏—Ñ: {subscription['tariff_name']}\n"
        f"üóì –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {subscription['end_date'][:10]}\n"
        f"‚è± –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {subscription['days_left']}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
    if "total_traffic_gb" in subscription:
        text += (
            f"\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚¨ÜÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {subscription['upload_traffic_gb']} –ì–ë\n"
            f"‚¨áÔ∏è –ü–æ–ª—É—á–µ–Ω–æ: {subscription['download_traffic_gb']} –ì–ë\n"
            f"üîÑ –í—Å–µ–≥–æ: {subscription['total_traffic_gb']} –ì–ë\n"
        )
        
        if subscription['total_limit_gb'] != "‚àû":
            text += f"üíæ –û—Å—Ç–∞–ª–æ—Å—å: {subscription['remaining_traffic_gb']} –ì–ë\n"
        else:
            text += f"üíæ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {subscription['total_limit_gb']}\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await callback.message.edit_text(
        text,
        reply_markup=get_subscription_keyboard(subscription),
        parse_mode="HTML"
    )
    
    # –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    await callback.answer()


@router.callback_query(F.data.startswith("subscription:url:"))
async def subscription_url(callback: CallbackQuery, user: User, vpn_service: VPNService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ callback data
    subscription_id = int(callback.data.split(":")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscriptions = await vpn_service.get_user_subscriptions(user.user_id)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ ID
    subscription = next((s for s in subscriptions if s["subscription_id"] == subscription_id), None)
    
    if not subscription or not subscription.get("subscription_url"):
        await callback.answer("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    await callback.message.answer(
        f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n"
        f"<code>{subscription['subscription_url']}</code>\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN –≤ –∫–ª–∏–µ–Ω—Ç–µ. "
        f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ 'üíª –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'.",
        parse_mode="HTML"
    )
    
    # –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    await callback.answer()


@router.callback_query(F.data.startswith("subscription:renew:"))
async def subscription_renew(
    callback: CallbackQuery, user: User, vpn_service: VPNService, 
    payment_service: PaymentService, state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ callback data
    subscription_id = int(callback.data.split(":")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscriptions = await vpn_service.get_user_subscriptions(user.user_id)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ ID
    subscription = next((s for s in subscriptions if s["subscription_id"] == subscription_id), None)
    
    if not subscription:
        await callback.answer("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
    redirect_url = "https://t.me/your_bot_username"
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    payment_data = await payment_service.create_payment(
        user_id=user.user_id,
        tariff_id=subscription["tariff_id"],
        redirect_url=redirect_url,
        subscription_id=subscription_id,
        description=f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–∞—Ä–∏—Ñ {subscription['tariff_name']}"
    )
    
    if not payment_data:
        await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        payment_id=payment_data["payment_id"],
        subscription_id=subscription_id
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ –∏ –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã
    await callback.message.edit_text(
        f"üí≥ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ #{subscription_id}</b>\n\n"
        f"–¢–∞—Ä–∏—Ñ: {subscription['tariff_name']}\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment_data['amount']} —Ä—É–±.\n\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∞ "
        f"–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        reply_markup=get_payment_keyboard(payment_data["payment_url"]),
        parse_mode="HTML"
    )
    
    # –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    await callback.answer()


@router.callback_query(F.data.startswith("subscription:cancel:"))
async def subscription_cancel(callback: CallbackQuery, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ callback data
    subscription_id = int(callback.data.split(":")[-1])
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ #{subscription_id}</b>\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É? "
        f"–ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –¥–æ—Å—Ç—É–ø –∫ VPN –±—É–¥–µ—Ç –ø—Ä–µ–∫—Ä–∞—â–µ–Ω.",
        reply_markup=get_callback_keyboard("cancel_subscription", subscription_id),
        parse_mode="HTML"
    )
    
    # –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    await callback.answer()


@router.callback_query(F.data.startswith("confirm:cancel_subscription:"))
async def confirm_subscription_cancel(callback: CallbackQuery, user: User, vpn_service: VPNService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ callback data
    subscription_id = int(callback.data.split(":")[-1])
    
    # –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    success = await vpn_service.cancel_subscription(subscription_id)
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ #{subscription_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.</b>\n\n"
            f"–î–æ—Å—Ç—É–ø –∫ VPN –ø—Ä–µ–∫—Ä–∞—â–µ–Ω.",
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É #{subscription_id}.</b>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            parse_mode="HTML"
        )
    
    # –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    await callback.answer()


@router.callback_query(F.data.startswith("cancel:cancel_subscription:"))
async def cancel_subscription_cancel(callback: CallbackQuery, user: User, vpn_service: VPNService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ callback data
    subscription_id = int(callback.data.split(":")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscriptions = await vpn_service.get_user_subscriptions(user.user_id)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ ID
    subscription = next((s for s in subscriptions if s["subscription_id"] == subscription_id), None)
    
    if not subscription:
        await callback.answer("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
    status_emoji = "‚úÖ" if subscription["status"] == "active" else "‚è≥"
    
    text = (
        f"{status_emoji} <b>–ü–æ–¥–ø–∏—Å–∫–∞ #{subscription['subscription_id']}</b>\n\n"
        f"üìã –¢–∞—Ä–∏—Ñ: {subscription['tariff_name']}\n"
        f"üóì –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {subscription['end_date'][:10]}\n"
        f"‚è± –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {subscription['days_left']}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
    if "total_traffic_gb" in subscription:
        text += (
            f"\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚¨ÜÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {subscription['upload_traffic_gb']} –ì–ë\n"
            f"‚¨áÔ∏è –ü–æ–ª—É—á–µ–Ω–æ: {subscription['download_traffic_gb']} –ì–ë\n"
            f"üîÑ –í—Å–µ–≥–æ: {subscription['total_traffic_gb']} –ì–ë\n"
        )
        
        if subscription['total_limit_gb'] != "‚àû":
            text += f"üíæ –û—Å—Ç–∞–ª–æ—Å—å: {subscription['remaining_traffic_gb']} –ì–ë\n"
        else:
            text += f"üíæ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {subscription['total_limit_gb']}\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await callback.message.edit_text(
        text,
        reply_markup=get_subscription_keyboard(subscription),
        parse_mode="HTML"
    )
    
    # –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    await callback.answer() 