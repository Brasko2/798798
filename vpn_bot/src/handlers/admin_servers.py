"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from ..models.cluster import VPNCluster, VPNServer
from ..models.user import User
from ..exceptions import DatabaseError, VPNServerError
from ..keyboards.server import (
    get_admin_clusters_list_kb, 
    get_admin_servers_list_kb, 
    get_admin_server_kb
)
from ..middlewares.auth import AdminMiddleware

router = Router()
router.message.middleware(AdminMiddleware())
router.callback_query.middleware(AdminMiddleware())

logger = logging.getLogger(__name__)


class ServerForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    cluster_id = State()  # ID –∫–ª–∞—Å—Ç–µ—Ä–∞
    name = State()        # –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞
    country = State()     # –°—Ç—Ä–∞–Ω–∞
    city = State()        # –ì–æ—Ä–æ–¥
    ip_address = State()  # IP-–∞–¥—Ä–µ—Å
    api_url = State()     # URL API
    api_username = State() # –õ–æ–≥–∏–Ω API
    api_password = State() # –ü–∞—Ä–æ–ª—å API
    priority = State()    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç


@router.callback_query(F.data == "admin:servers")
async def admin_servers_menu(callback: CallbackQuery, user: User):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Ç–µ—Ä—ã
        clusters = await VPNCluster.get_all()
        
        if not clusters:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä.", show_alert=True)
            return
            
        text = "üåê <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VPN-—Å–µ—Ä–≤–µ—Ä–∞–º–∏</b>\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞–º–∏:\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏
        keyboard = get_admin_clusters_list_kb(clusters)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error in admin servers menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤", show_alert=True)


@router.callback_query(F.data.startswith("admin_cluster:view_servers:"))
async def admin_view_servers(callback: CallbackQuery, user: User):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
        cluster_id = int(callback.data.split(":")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Ç–µ—Ä–µ
        cluster = await VPNCluster.get_by_id(cluster_id)
        if not cluster:
            await callback.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã –∫–ª–∞—Å—Ç–µ—Ä–∞
        servers = await VPNServer.get_by_cluster(cluster_id)
        
        text = f"üåê <b>–°–µ—Ä–≤–µ—Ä—ã –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster.name}</b>\n\n"
        
        if not servers:
            text += "–í —ç—Ç–æ–º –∫–ª–∞—Å—Ç–µ—Ä–µ –Ω–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤.\n"
            text += "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Å–µ—Ä–≤–µ—Ä, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        else:
            text += f"–í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(servers)}\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–æ–≤
        keyboard = get_admin_servers_list_kb(servers, cluster_id)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error viewing servers in cluster: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤", show_alert=True)


@router.callback_query(F.data.startswith("admin_server:view:"))
async def admin_view_server(callback: CallbackQuery, user: User):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
        server_id = int(callback.data.split(":")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
        server = await VPNServer.get_by_id(server_id)
        if not server:
            await callback.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Ç–µ—Ä–µ
        cluster = await VPNCluster.get_by_id(server.cluster_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É —Å–µ—Ä–≤–µ—Ä–∞
        load = await server.get_load()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = f"üñ• <b>–°–µ—Ä–≤–µ—Ä: {server.name}</b>\n\n"
        text += f"üÜî ID: <code>{server.id}</code>\n"
        text += f"üåê –ö–ª–∞—Å—Ç–µ—Ä: {cluster.name if cluster else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        text += f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {server.country}, {server.city}\n"
        text += f"üîÑ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if server.is_active else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
        text += f"üî¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {server.priority}\n"
        text += f"üíª IP-–∞–¥—Ä–µ—Å: <code>{server.ip_address}</code>\n"
        text += f"üîó API URL: <code>{server.api_url}</code>\n"
        text += f"üë§ API –ª–æ–≥–∏–Ω: <code>{server.api_username}</code>\n"
        text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {load}\n"
        text += f"üìÖ –°–æ–∑–¥–∞–Ω: {server.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        text += f"üîÑ –û–±–Ω–æ–≤–ª—ë–Ω: {server.updated_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º
        keyboard = get_admin_server_kb(server)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error viewing server details: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ", show_alert=True)


@router.callback_query(F.data.startswith("admin_server:enable:") | F.data.startswith("admin_server:disable:"))
async def admin_toggle_server_status(callback: CallbackQuery, user: User):
    """
    –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ ID —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
        action, server_id = callback.data.split(":")[1:3]
        server_id = int(server_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
        server = await VPNServer.get_by_id(server_id)
        if not server:
            await callback.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
        new_status = action == "enable"
        result = await server.update(is_active=new_status)
        
        if result:
            status_text = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω"
            await callback.answer(f"–°–µ—Ä–≤–µ—Ä {server.name} —É—Å–ø–µ—à–Ω–æ {status_text}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
            await admin_view_server(callback, user)
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)
    
    except Exception as e:
        logger.error(f"Error toggling server status: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)


@router.callback_query(F.data.startswith("admin_server:delete:"))
async def admin_delete_server(callback: CallbackQuery, user: User):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
        server_id = int(callback.data.split(":")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
        server = await VPNServer.get_by_id(server_id)
        if not server:
            await callback.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID –∫–ª–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        cluster_id = server.cluster_id
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä
        result = await server.delete()
        
        if result:
            await callback.answer(f"–°–µ—Ä–≤–µ—Ä {server.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–∞
            callback.data = f"admin_cluster:view_servers:{cluster_id}"
            await admin_view_servers(callback, user)
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä. –í–æ–∑–º–æ–∂–Ω–æ, —É –Ω–µ–≥–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True)
    
    except Exception as e:
        logger.error(f"Error deleting server: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)


@router.callback_query(F.data.startswith("admin_server:stats:"))
async def admin_server_stats(callback: CallbackQuery, user: User):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
        server_id = int(callback.data.split(":")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
        server = await VPNServer.get_by_id(server_id)
        if not server:
            await callback.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º
        from ..models.subscription import Subscription
        active_subscriptions = await Subscription.get_active_by_server(server_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ {server.name}</b>\n\n"
        text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(active_subscriptions)}\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –¥–Ω—è–º –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        expiring_soon = 0
        expired_within_day = 0
        
        for sub in active_subscriptions:
            if sub.days_left <= 3:
                expiring_soon += 1
            if sub.days_left <= 1:
                expired_within_day += 1
        
        text += f"‚è≥ –ò—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è: {expiring_soon}\n"
        text += f"‚ö†Ô∏è –ò—Å—Ç–µ–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤: {expired_within_day}\n\n"
        
        # –¢—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–µ—Ä—É",
            callback_data=f"admin_server:view:{server_id}"
        )
        keyboard = builder.as_markup()
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error showing server stats: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)


@router.callback_query(F.data.startswith("admin_cluster:add_server:"))
async def admin_add_server_start(callback: CallbackQuery, state: FSMContext, user: User):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
        cluster_id = int(callback.data.split(":")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Ç–µ—Ä–µ
        cluster = await VPNCluster.get_by_id(cluster_id)
        if not cluster:
            await callback.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–ª–∞—Å—Ç–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(cluster_id=cluster_id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
        await state.set_state(ServerForm.name)
        
        text = f"üÜï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∫–ª–∞—Å—Ç–µ—Ä {cluster.name}</b>\n\n"
        text += "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:"
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=f"admin_cluster:view_servers:{cluster_id}"
        )
        keyboard = builder.as_markup()
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error starting add server process: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)


@router.message(ServerForm.name)
async def process_server_name(message: Message, state: FSMContext, user: User):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
    await state.update_data(name=message.text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ —Å—Ç—Ä–∞–Ω—ã
    await state.set_state(ServerForm.country)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    cluster_id = data["cluster_id"]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=f"admin_cluster:view_servers:{cluster_id}"
    )
    keyboard = builder.as_markup()
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Russia):",
        reply_markup=keyboard
    )


@router.message(ServerForm.country)
async def process_server_country(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Ç—Ä–∞–Ω—ã —Å–µ—Ä–≤–µ—Ä–∞
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω—É
    await state.update_data(country=message.text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞
    await state.set_state(ServerForm.city)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    cluster_id = data["cluster_id"]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=f"admin_cluster:view_servers:{cluster_id}"
    )
    keyboard = builder.as_markup()
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞:",
        reply_markup=keyboard
    )


@router.message(ServerForm.city)
async def process_server_city(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ —Å–µ—Ä–≤–µ—Ä–∞
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥
    await state.update_data(city=message.text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ IP-–∞–¥—Ä–µ—Å–∞
    await state.set_state(ServerForm.ip_address)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    cluster_id = data["cluster_id"]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=f"admin_cluster:view_servers:{cluster_id}"
    )
    keyboard = builder.as_markup()
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:",
        reply_markup=keyboard
    )


@router.message(ServerForm.ip_address)
async def process_server_ip(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ IP-–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º IP-–∞–¥—Ä–µ—Å
    await state.update_data(ip_address=message.text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ URL API
    await state.set_state(ServerForm.api_url)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    cluster_id = data["cluster_id"]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=f"admin_cluster:view_servers:{cluster_id}"
    )
    keyboard = builder.as_markup()
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ URL API —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, http://192.168.1.100:54321):",
        reply_markup=keyboard
    )


@router.message(ServerForm.api_url)
async def process_server_api_url(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ URL API —Å–µ—Ä–≤–µ—Ä–∞
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL API
    await state.update_data(api_url=message.text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ API
    await state.set_state(ServerForm.api_username)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    cluster_id = data["cluster_id"]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=f"admin_cluster:view_servers:{cluster_id}"
    )
    keyboard = builder.as_markup()
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞:",
        reply_markup=keyboard
    )


@router.message(ServerForm.api_username)
async def process_server_api_username(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ API —Å–µ—Ä–≤–µ—Ä–∞
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏–Ω API
    await state.update_data(api_username=message.text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è API
    await state.set_state(ServerForm.api_password)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    cluster_id = data["cluster_id"]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=f"admin_cluster:view_servers:{cluster_id}"
    )
    keyboard = builder.as_markup()
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞:",
        reply_markup=keyboard
    )


@router.message(ServerForm.api_password)
async def process_server_api_password(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è API —Å–µ—Ä–≤–µ—Ä–∞
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å API
    await state.update_data(api_password=message.text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    await state.set_state(ServerForm.priority)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    cluster_id = data["cluster_id"]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=f"admin_cluster:view_servers:{cluster_id}"
    )
    keyboard = builder.as_markup()
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10, –≥–¥–µ 1 - –Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç):",
        reply_markup=keyboard
    )


@router.message(ServerForm.priority)
async def process_server_priority(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        try:
            priority = int(message.text)
            if priority < 1 or priority > 10:
                raise ValueError("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        await state.update_data(priority=priority)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
        server = await VPNServer.create(
            cluster_id=data["cluster_id"],
            name=data["name"],
            country=data["country"],
            city=data["city"],
            ip_address=data["ip_address"],
            api_url=data["api_url"],
            api_username=data["api_username"],
            api_password=data["api_password"],
            priority=data["priority"]
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
        try:
            # –≠—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —à–∞–≥, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            pass
        except Exception as e:
            logger.warning(f"Error testing connection to server: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–∞
        text = f"‚úÖ –°–µ—Ä–≤–µ—Ä {server.name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        text += f"–ö–ª–∞—Å—Ç–µ—Ä: {server.cluster_id}\n"
        text += f"ID: {server.id}\n"
        text += f"–°—Ç—Ä–∞–Ω–∞: {server.country}\n"
        text += f"–ì–æ—Ä–æ–¥: {server.city}\n"
        text += f"IP: {server.ip_address}\n"
        text += f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {server.priority}\n\n"
        text += "–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤..."
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        builder.button(
            text="üìã –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤",
            callback_data=f"admin_cluster:view_servers:{server.cluster_id}"
        )
        builder.button(
            text="üñ• –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Ä–≤–µ—Ä–∞",
            callback_data=f"admin_server:view:{server.id}"
        )
        keyboard = builder.as_markup()
        
        await message.answer(text, reply_markup=keyboard)
    
    except Exception as e:
        logger.error(f"Error creating server: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–∞
        data = await state.get_data()
        cluster_id = data["cluster_id"]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        builder.button(
            text="üìã –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤",
            callback_data=f"admin_cluster:view_servers:{cluster_id}"
        )
        keyboard = builder.as_markup()
        
        await message.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤...", reply_markup=keyboard)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear() 