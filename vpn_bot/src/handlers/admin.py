"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ..models import User, Tariff, Subscription, Payment, SupportTicket
from ..keyboards import get_admin_keyboard
from ..exceptions import DatabaseError


logger = logging.getLogger(__name__)
router = Router()


class TariffForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞"""
    name = State()
    description = State()
    price = State()
    duration = State()
    traffic_limit = State()
    devices = State()


@router.message(Command("admin"))
async def cmd_admin(message: Message, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not user.is_admin:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    await message.answer(
        "üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.",
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    )


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_stats(message: Message, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    if not user.is_admin:
        return
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        users_count = await User.count()
        active_subscriptions = await Subscription.get_active_count()
        total_payments = await Payment.get_total_amount()
        open_tickets = await SupportTicket.get_open_count()
        
        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            f"üîë –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subscriptions}\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments:.2f} —Ä—É–±.\n"
            f"üÜò –û—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {open_tickets}\n"
        )
        
        await message.answer(stats_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error getting statistics: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def admin_users(message: Message, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not user.is_admin:
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await User.get_recent(10)
        
        if not users:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        users_text = "üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"
        
        for idx, u in enumerate(users, 1):
            users_text += (
                f"{idx}. ID: {u.id}\n"
                f"   –ò–º—è: {u.full_name}\n"
                f"   –ë–∞–ª–∞–Ω—Å: {u.balance:.2f} —Ä—É–±.\n"
                f"   –°–æ–∑–¥–∞–Ω: {u.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            )
        
        users_text += "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /user_info [ID]"
        
        await message.answer(users_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error getting users list: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


@router.message(F.text == "üíµ –§–∏–Ω–∞–Ω—Å—ã")
async def admin_finances(message: Message, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –§–∏–Ω–∞–Ω—Å—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    if not user.is_admin:
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_payments = await Payment.get_total_amount()
        monthly_payments = await Payment.get_monthly_amount()
        recent_payments = await Payment.get_recent(5)
        
        finance_text = (
            "üíµ <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments:.2f} —Ä—É–±.\n"
            f"üìÖ –ü–ª–∞—Ç–µ–∂–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {monthly_payments:.2f} —Ä—É–±.\n\n"
            "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n"
        )
        
        if recent_payments:
            for idx, payment in enumerate(recent_payments, 1):
                finance_text += (
                    f"{idx}. ID: {payment.id}\n"
                    f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {payment.user_id}\n"
                    f"   –°—É–º–º–∞: {payment.amount:.2f} —Ä—É–±.\n"
                    f"   –°—Ç–∞—Ç—É—Å: {payment.status.value}\n"
                    f"   –î–∞—Ç–∞: {payment.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                )
        else:
            finance_text += "–ü–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.\n"
        
        await message.answer(finance_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error getting financial information: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")


@router.message(F.text == "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def admin_settings(message: Message, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    if not user.is_admin:
        return
    
    settings_text = (
        "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/add_tariff - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ\n"
        "/edit_tariff - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–∏—Ñ\n"
        "/delete_tariff - –£–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ\n"
        "/list_tariffs - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞—Ä–∏—Ñ–æ–≤\n\n"
        "/broadcast - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        "/maintenance - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è\n"
    )
    
    await message.answer(settings_text, parse_mode="HTML")


@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def admin_main_menu(message: Message, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    from ..keyboards import main_keyboard
    
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_keyboard(is_admin=user.is_admin)
    )


@router.message(Command("add_tariff"))
async def cmd_add_tariff(message: Message, user: User, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞"""
    if not user.is_admin:
        return
    
    await message.answer(
        "üÜï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞:",
        parse_mode="HTML"
    )
    await state.set_state(TariffForm.name)


@router.message(TariffForm.name)
async def process_tariff_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ç–∞—Ä–∏—Ñ–∞"""
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞:")
    await state.set_state(TariffForm.description)


@router.message(TariffForm.description)
async def process_tariff_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞"""
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–∞—Ä–∏—Ñ–∞ (–≤ —Ä—É–±–ª—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 299.99):")
    await state.set_state(TariffForm.price)


@router.message(TariffForm.price)
async def process_tariff_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞"""
    try:
        price = float(message.text.replace(",", "."))
        if price <= 0:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        await state.update_data(price=price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ (–≤ –¥–Ω—è—Ö):")
        await state.set_state(TariffForm.duration)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 299.99:")


@router.message(TariffForm.duration)
async def process_tariff_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ–∞"""
    try:
        duration = int(message.text)
        if duration <= 0:
            await message.answer("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        await state.update_data(duration=duration)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –ì–ë (–∏–ª–∏ 0 –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ):"
        )
        await state.set_state(TariffForm.traffic_limit)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")


@router.message(TariffForm.traffic_limit)
async def process_tariff_traffic(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞"""
    try:
        traffic = float(message.text.replace(",", "."))
        if traffic < 0:
            await message.answer("–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        # 0 –æ–∑–Ω–∞—á–∞–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
        traffic_limit = None if traffic == 0 else traffic
        await state.update_data(traffic_limit=traffic_limit)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:")
        await state.set_state(TariffForm.devices)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")


@router.message(TariffForm.devices)
async def process_tariff_devices(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞"""
    try:
        devices = int(message.text)
        if devices <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        form_data = await state.get_data()
        form_data["devices"] = devices
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ
        try:
            tariff = await Tariff.create(
                name=form_data["name"],
                description=form_data["description"],
                price=form_data["price"],
                duration=form_data["duration"],
                traffic_limit=form_data["traffic_limit"],
                devices=form_data["devices"]
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ
            tariff_info = (
                "‚úÖ <b>–¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"ID: {tariff.id}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {tariff.name}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {tariff.description}\n"
                f"–¶–µ–Ω–∞: {tariff.price:.2f} —Ä—É–±.\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tariff.duration} –¥–Ω–µ–π\n"
                f"–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {'–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π' if tariff.traffic_limit is None else f'{tariff.traffic_limit} –ì–ë'}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {tariff.devices}"
            )
            
            await message.answer(tariff_info, parse_mode="HTML")
        except Exception as e:
            logger.error(f"Error creating tariff: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞: {str(e)}")
            
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")


@router.message(Command("admin_info"))
async def cmd_admin_info(message: Message, user: User):
    """
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
    """
    if not user.is_admin:
        return
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        users_count = await User.count()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
        users = await User.get_all()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ)
        top_referrers = sorted(users, key=lambda u: u.referral_count, reverse=True)[:10]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ</b>\n\n"
        text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ–Ω—É—Å–Ω—ã–º –¥–Ω—è–º
        total_bonus_days = sum(u.referral_bonus_days for u in users)
        total_referrals = sum(u.referral_count for u in users)
        text += f"üîó –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals}\n"
        text += f"‚è≥ –í—Å–µ–≥–æ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π: {total_bonus_days}\n\n"
        
        # –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
        text += "<b>–¢–æ–ø-10 —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤:</b>\n"
        for i, ref_user in enumerate(top_referrers, 1):
            if ref_user.referral_count > 0:
                username = ref_user.username or f"ID: {ref_user.id}"
                text += f"{i}. @{username}: {ref_user.referral_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, {ref_user.referral_bonus_days} –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π\n"
        
        await message.answer(text)
        
    except Exception as e:
        logger.error(f"Error getting referral stats: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


@router.message(Command("reset_bonus"))
async def cmd_reset_bonus(message: Message, user: User):
    """
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –§–æ—Ä–º–∞—Ç: /reset_bonus <user_id>
    """
    if not user.is_admin:
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    command_parts = message.text.split()
    if len(command_parts) != 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reset_bonus <user_id>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /reset_bonus 123456789"
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user_id = int(command_parts[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user = await User.get_by_id(target_user_id)
        if not target_user:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è –æ—Ç—á–µ—Ç–∞
        prev_bonus_days = target_user.referral_bonus_days
        
        # –û–±–Ω—É–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏
        target_user.referral_bonus_days = 0
        await target_user.save()
        
        await message.answer(
            f"‚úÖ –ë–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —Å–±—Ä–æ—à–µ–Ω—ã.\n"
            f"–ë—ã–ª–æ: {prev_bonus_days} –¥–Ω–µ–π\n"
            f"–°—Ç–∞–ª–æ: 0 –¥–Ω–µ–π"
        )
        
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
    except Exception as e:
        logger.error(f"Error resetting bonus days: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π: {str(e)}")


@router.message(Command("add_bonus"))
async def cmd_add_bonus(message: Message, user: User):
    """
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –§–æ—Ä–º–∞—Ç: /add_bonus <user_id> <days>
    """
    if not user.is_admin:
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    command_parts = message.text.split()
    if len(command_parts) != 3:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_bonus <user_id> <days>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /add_bonus 123456789 7"
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        target_user_id = int(command_parts[1])
        days_to_add = int(command_parts[2])
        
        if days_to_add <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user = await User.get_by_id(target_user_id)
        if not target_user:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è –æ—Ç—á–µ—Ç–∞
        prev_bonus_days = target_user.referral_bonus_days
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏
        await target_user.add_referral_bonus_days(days_to_add)
        
        await message.answer(
            f"‚úÖ –ë–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n"
            f"–ë—ã–ª–æ: {prev_bonus_days} –¥–Ω–µ–π\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {days_to_add} –¥–Ω–µ–π\n"
            f"–°—Ç–∞–ª–æ: {target_user.referral_bonus_days} –¥–Ω–µ–π"
        )
        
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
    except Exception as e:
        logger.error(f"Error adding bonus days: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π: {str(e)}") 