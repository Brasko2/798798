"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å VPN —Å–µ—Ä–≤–µ—Ä–∞–º–∏
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import logging

from ..models.cluster import VPNCluster, VPNServer, get_optimal_server
from ..models.subscription import Subscription
from ..models.user import User
from ..exceptions import DatabaseError, VPNServerError
from ..keyboards.server import get_server_selection_kb, get_cluster_selection_kb
from ..middleware import AuthMiddleware

router = Router()
router.message.middleware(AuthMiddleware())
router.callback_query.middleware(AuthMiddleware())

logger = logging.getLogger(__name__)


@router.message(Command("servers"))
async def cmd_servers(message: Message, user: User):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    """
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        clusters = await VPNCluster.get_all_active()
        
        if not clusters:
            await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.")
            return
        
        text = "üåê <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ VPN-—Å–µ—Ä–≤–µ—Ä—ã</b>\n\n"
        
        for cluster in clusters:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã –∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–∞
            servers = await VPNServer.get_by_cluster(cluster.id)
            active_servers = [server for server in servers if server.is_active]
            
            if not active_servers:
                continue
                
            text += f"<b>{cluster.name}</b> - {cluster.description}\n"
            text += f"–°–µ—Ä–≤–µ—Ä–æ–≤: {len(active_servers)}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö (–Ω–µ –±–æ–ª–µ–µ 3)
            for i, server in enumerate(active_servers[:3]):
                text += f"‚Ä¢ {server.name} ({server.country}, {server.city})\n"
            
            if len(active_servers) > 3:
                text += f"... –∏ –µ—â—ë {len(active_servers) - 3} —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
            
            text += "\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤:"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞
        keyboard = get_cluster_selection_kb(clusters)
        
        await message.answer(text, reply_markup=keyboard)
    
    except Exception as e:
        logger.error(f"Error listing servers: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.")


@router.callback_query(F.data.startswith("cluster:"))
async def on_cluster_selected(callback: CallbackQuery, user: User):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
        cluster_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Ç–µ—Ä–µ
        cluster = await VPNCluster.get_by_id(cluster_id)
        if not cluster:
            await callback.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã –∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–∞
        servers = await VPNServer.get_by_cluster(cluster.id)
        active_servers = [server for server in servers if server.is_active]
        
        if not active_servers:
            await callback.answer("–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–ª–∞—Å—Ç–µ—Ä–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤", show_alert=True)
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = f"üåê <b>{cluster.name}</b>\n"
        text += f"{cluster.description}\n\n"
        text += f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã ({len(active_servers)}):</b>\n\n"
        
        for i, server in enumerate(active_servers):
            text += f"{i+1}. <b>{server.name}</b>\n"
            text += f"   üìç {server.country}, {server.city}\n"
        
        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
        keyboard = get_server_selection_kb(active_servers)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error displaying servers in cluster: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤", show_alert=True)


@router.callback_query(F.data.startswith("server:"))
async def on_server_selected(callback: CallbackQuery, user: User):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
        server_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
        server = await VPNServer.get_by_id(server_id)
        if not server:
            await callback.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Ç–µ—Ä–µ
        cluster = await VPNCluster.get_by_id(server.cluster_id)
        if not cluster:
            cluster_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä"
        else:
            cluster_name = cluster.name
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = f"üñ• <b>–°–µ—Ä–≤–µ—Ä: {server.name}</b>\n\n"
        text += f"üåê –ö–ª–∞—Å—Ç–µ—Ä: {cluster_name}\n"
        text += f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {server.country}, {server.city}\n"
        text += f"üîÑ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if server.is_active else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        active_subscriptions = await Subscription.get_active_by_server(server_id)
        text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_subscriptions)}\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        user_subscriptions = await Subscription.get_active_by_user(user.id)
        user_has_subscription_on_server = any(sub.server_id == server_id for sub in user_subscriptions)
        
        if user_has_subscription_on_server:
            text += "‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.\n"
            text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscriptions –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫."
        else:
            text += "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.\n"
            text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –∫–ª–∞—Å—Ç–µ—Ä—É"
        keyboard = get_cluster_selection_kb([cluster]) if cluster else None
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error displaying server details: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ", show_alert=True)


async def select_optimal_server(user_id: int, tariff_id: int) -> VPNServer:
    """
    –í—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tariff_id: ID —Ç–∞—Ä–∏—Ñ–∞
        
    Returns:
        –û–±—ä–µ–∫—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        return await get_optimal_server()
    except Exception as e:
        logger.error(f"Error selecting optimal server for user {user_id}: {e}")
        raise VPNServerError(f"Failed to select optimal server: {e}") 