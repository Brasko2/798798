"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ VPN-–ø–æ–¥–ø–∏—Å–æ–∫ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ª—É—á—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –æ–ø—ã—Ç–æ–º
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
import logging
from datetime import datetime

from ..models.user import User
from ..models.tariff import Tariff
from ..models.payment import Payment
from ..models.subscription import Subscription
from ..keyboards.buy import get_tariff_selection_kb, get_payment_kb, get_payment_success_kb
from ..services.payment_service import payment_service
from ..middleware import AuthMiddleware

router = Router()
router.message.middleware(AuthMiddleware())
router.callback_query.middleware(AuthMiddleware())

logger = logging.getLogger(__name__)


@router.message(Command("buy"))
@router.message(F.text == "üöÄ –ö—É–ø–∏—Ç—å VPN")
async def cmd_buy(message: Message, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /buy –∏ –∫–Ω–æ–ø–∫–∏ '–ö—É–ø–∏—Ç—å VPN'
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
        tariffs = await Tariff.get_active()
        
        if not tariffs:
            await message.answer(
                "üòî <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤.</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —Ç–∞—Ä–∏—Ñ–æ–≤
        text = "üöÄ <b>–ü–†–ï–ú–ò–£–ú VPN-–î–û–°–¢–£–ü</b>\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
        for idx, tariff in enumerate(tariffs, 1):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ç–∞—Ä–∏—Ñ–∞
            if tariff.is_trial:
                emoji = "üéÅ"  # –ü—Ä–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ
            elif tariff.price < 300:
                emoji = "üîπ"  # –ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ
            elif tariff.price < 700:
                emoji = "üî∂"  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
            else:
                emoji = "üíé"  # –ü—Ä–µ–º–∏—É–º —Ç–∞—Ä–∏—Ñ
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
            price_text = f"{tariff.price:.0f}" if tariff.price == int(tariff.price) else f"{tariff.price:.2f}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
            text += f"{emoji} <b>{tariff.name}</b> ‚Äî {price_text}‚ÇΩ\n"
            text += f"    ‚úì {tariff.duration_days} –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞\n"
            text += f"    ‚úì –î–æ {tariff.max_devices} {'—É—Å—Ç—Ä–æ–π—Å—Ç–≤' if tariff.max_devices > 1 else '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞—Ñ–∏–∫–µ, –µ—Å–ª–∏ –æ–Ω –æ–≥—Ä–∞–Ω–∏—á–µ–Ω
            if tariff.traffic_limit_mb > 0:
                traffic_gb = tariff.traffic_limit_mb / 1024
                text += f"    ‚úì {traffic_gb:.1f} –ì–ë —Ç—Ä–∞—Ñ–∏–∫–∞\n"
            else:
                text += f"    ‚úì –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫\n"
                
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if tariff.description:
                text += f"    {tariff.description}\n"
                
            text += "\n"
            
        text += "üõ°Ô∏è <b>–í—Å–µ —Ç–∞—Ä–∏—Ñ—ã –≤–∫–ª—é—á–∞—é—Ç:</b>\n"
        text += "‚Ä¢ –ü–æ–ª–Ω—É—é –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n"
        text += "‚Ä¢ –í—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
        text += "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ª—é–±—ã–º —Å–∞–π—Ç–∞–º –∏ —Å–µ—Ä–≤–∏—Å–∞–º\n"
        text += "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É 24/7\n\n"
        
        text += "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:</b>"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
        await message.answer(
            text,
            reply_markup=get_tariff_selection_kb(tariffs)
        )
        
    except Exception as e:
        logger.error(f"Error in buy command: {e}")
        await message.answer(
            "üôÅ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–æ–≤. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É /support"
        )


@router.callback_query(F.data.startswith("tariff:"))
async def on_tariff_selected(callback: CallbackQuery, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
    –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
        tariff_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        tariff = await Tariff.get_by_id(tariff_id)
        
        if not tariff:
            await callback.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment = await payment_service.create_payment(user.id, tariff.id, tariff.price)
        
        if not payment:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ —Å –ø—Ä–∏—è—Ç–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        text = "üí≥ <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –û–ü–õ–ê–¢–ï</b>\n\n"
        text += f"üì¶ <b>–¢–∞—Ä–∏—Ñ:</b> {tariff.name}\n"
        text += f"‚è±Ô∏è <b>–ü–µ—Ä–∏–æ–¥:</b> {tariff.duration_days} –¥–Ω–µ–π\n"
        text += f"üíª <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤:</b> –¥–æ {tariff.max_devices}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞—Ñ–∏–∫–µ, –µ—Å–ª–∏ –æ–Ω –æ–≥—Ä–∞–Ω–∏—á–µ–Ω
        if tariff.traffic_limit_mb > 0:
            traffic_gb = tariff.traffic_limit_mb / 1024
            text += f"üìä <b>–¢—Ä–∞—Ñ–∏–∫:</b> {traffic_gb:.1f} –ì–ë\n"
        else:
            text += "üìä <b>–¢—Ä–∞—Ñ–∏–∫:</b> –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π\n"
            
        text += f"üí∞ <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> {tariff.price:.2f}‚ÇΩ\n\n"
        
        text += "üîÑ <b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:</b> –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã\n\n"
        
        text += "üëâ –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ¬ª\n"
        text += "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª\n\n"
        
        text += "<i>–ü–ª–∞—Ç–µ–∂ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç</i>"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –æ–ø–ª–∞—Ç–µ
        await callback.message.edit_text(
            text,
            reply_markup=get_payment_kb(payment.payment_url)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in tariff selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞—Ä–∏—Ñ–∞", show_alert=True)


@router.callback_query(F.data == "check_payment")
async def on_check_payment(callback: CallbackQuery, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        payment = await Payment.get_latest_pending(user.id)
        
        if not payment:
            await callback.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        payment_status = await payment_service.check_payment(payment.payment_id)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–∞
        if payment_status == "succeeded":
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            await payment.set_paid()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ
            tariff = await Tariff.get_by_id(payment.tariff_id)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription = await Subscription.create(
                user_id=user.id,
                tariff_id=tariff.id,
                payment_id=payment.id,
                duration_days=tariff.duration_days,
                max_devices=tariff.max_devices,
                traffic_limit_mb=tariff.traffic_limit_mb
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
            text = "‚úÖ <b>–û–ü–õ–ê–¢–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!</b>\n\n"
            text += f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–∞—Ä–∏—Ñ <b>{tariff.name}</b>\n\n"
            text += f"üìÜ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> {subscription.expires_at.strftime('%d.%m.%Y')}\n"
            text += f"üîë <b>ID –ø–æ–¥–ø–∏—Å–∫–∏:</b> {subscription.id}\n\n"
            
            text += "üì≤ <b>–ß–¢–û –î–ê–õ–¨–®–ï?</b>\n"
            text += "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏¬ª\n"
            text += "2. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n"
            text += "3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ\n\n"
            
            text += "üí° <b>–°–æ–≤–µ—Ç:</b> –í —Ä–∞–∑–¥–µ–ª–µ ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ¬ª –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π
            await callback.message.edit_text(
                text,
                reply_markup=get_payment_success_kb()
            )
            
        elif payment_status == "pending":
            # –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await callback.answer("–ü–ª–∞—Ç–µ–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", show_alert=True)
            
        elif payment_status == "canceled":
            # –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω
            await payment.set_canceled()
            
            text = "‚ùå <b>–ü–õ–ê–¢–ï–ñ –û–¢–ú–ï–ù–ï–ù</b>\n\n"
            text += "–í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n"
            text += "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.\n\n"
            text += "–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à—É —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
            
            await callback.message.edit_text(
                text,
                reply_markup=get_tariff_selection_kb(await Tariff.get_active())
            )
            
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error checking payment: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


@router.callback_query(F.data == "cancel_payment")
async def on_cancel_payment(callback: CallbackQuery, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞
    –û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–ª–∞—Ç–µ–∂ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        payment = await Payment.get_latest_pending(user.id)
        
        if payment:
            # –û—Ç–º–µ—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π
            await payment.set_canceled()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã —Å–Ω–æ–≤–∞
        await cmd_buy(callback.message, user)
        await callback.answer("–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω")
        
    except Exception as e:
        logger.error(f"Error canceling payment: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True) 