"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
from datetime import datetime

from ..models.user import User
from ..models.ticket import Ticket
from ..models.support import SupportTicket
from ..keyboards.support import get_support_keyboard, get_support_ticket_keyboard, get_callback_keyboard
from ..keyboards.main import get_back_to_main_keyboard
from ..middleware import AuthMiddleware

router = Router()
router.message.middleware(AuthMiddleware())
router.callback_query.middleware(AuthMiddleware())

logger = logging.getLogger(__name__)


class SupportForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    waiting_for_message = State()
    waiting_for_rating = State()


@router.message(Command("support"))
@router.message(F.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def cmd_support(message: Message, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support –∏ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    """
    try:
        text = "üí¨ <b>–¶–ï–ù–¢–† –ü–û–î–î–ï–†–ñ–ö–ò</b>\n\n"
        
        text += "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞—à–µ–≥–æ VPN —Å–µ—Ä–≤–∏—Å–∞!\n\n"
        
        text += "üîπ <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n"
        text += "‚Ä¢ –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN –Ω–∞ –º–æ–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ?\n"
        text += "‚Ä¢ –ö–∞–∫ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?\n"
        text += "‚Ä¢ –ü–æ—á–µ–º—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω–æ–µ?\n"
        text += "‚Ä¢ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è?\n\n"
        
        text += "üîπ <b>–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:</b>\n"
        text += "–ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å!\n\n"
        
        text += "‚è± <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n"
        text += "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 21:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏\n"
        text += "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 1-2 —á–∞—Å–∞\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
        
        await message.answer(
            text,
            reply_markup=get_support_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in support command: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.callback_query(F.data == "support")
async def on_support_button(callback: CallbackQuery, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –¥—Ä—É–≥–∏—Ö –º–µ–Ω—é
    """
    try:
        await cmd_support(callback.message, user)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error handling support button: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "support:faq")
async def on_faq_button(callback: CallbackQuery, user: User):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    """
    try:
        text = "‚ùì <b>–ß–ê–°–¢–û –ó–ê–î–ê–í–ê–ï–ú–´–ï –í–û–ü–†–û–°–´</b>\n\n"
        
        text += "<b>–í–æ–ø—Ä–æ—Å:</b> –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN –Ω–∞ –º–æ–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ?\n"
        text += "<b>–û—Ç–≤–µ—Ç:</b> –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ¬ª. –¢–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –¥–ª—è Android, iOS, Windows, macOS, Linux –∏ –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.\n\n"
        
        text += "<b>–í–æ–ø—Ä–æ—Å:</b> –ü–æ—á–µ–º—É VPN —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ?\n"
        text += "<b>–û—Ç–≤–µ—Ç:</b> –°–∫–æ—Ä–æ—Å—Ç—å VPN –º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤: –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞, –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–æ–º—É —Å–µ—Ä–≤–µ—Ä—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–æ–¥–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ Wi-Fi –¥–ª—è –ª—É—á—à–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏.\n\n"
        
        text += "<b>–í–æ–ø—Ä–æ—Å:</b> –ö–∞–∫ –ø—Ä–æ–¥–ª–∏—Ç—å –º–æ—é –ø–æ–¥–ø–∏—Å–∫—É?\n"
        text += "<b>–û—Ç–≤–µ—Ç:</b> –ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å¬ª ‚Üí ¬´–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–ª–∏—Ç—å¬ª –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ö—É–ø–∏—Ç—å VPN¬ª.\n\n"
        
        text += "<b>–í–æ–ø—Ä–æ—Å:</b> –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ VPN –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è?\n"
        text += "<b>–û—Ç–≤–µ—Ç:</b> –ï—Å–ª–∏ VPN –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n"
        text += "1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ VPN\n"
        text += "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
        text += "3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä\n"
        text += "4. –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç–µ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å –∏–ª–∏ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä\n"
        text += "5. –û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ VPN –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏\n\n"
        
        text += "<b>–í–æ–ø—Ä–æ—Å:</b> –ú–æ–≥—É –ª–∏ —è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö?\n"
        text += "<b>–û—Ç–≤–µ—Ç:</b> –î–∞, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞. –ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å –¥–æ 3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π - –¥–æ 5, –∞ –ø—Ä–µ–º–∏—É–º - –¥–æ 10 —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.\n\n"
        
        text += "<b>–í–æ–ø—Ä–æ—Å:</b> –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –º–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞?\n"
        text += "<b>–û—Ç–≤–µ—Ç:</b> –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å¬ª ‚Üí ¬´–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏¬ª, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é¬ª. –ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n\n"
        
        text += "–ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –∏ –º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –≤–∞–º –ø–æ–º–æ–∂–µ–º!"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_to_main_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error showing FAQ: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ FAQ", show_alert=True)


@router.callback_query(F.data == "support:new_ticket")
async def on_new_ticket_button(callback: CallbackQuery, state: FSMContext, user: User):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    """
    try:
        await state.set_state(SupportForm.waiting_for_message)
        
        text = "üìù <b>–°–û–ó–î–ê–ù–ò–ï –û–ë–†–ê–©–ï–ù–ò–Ø –í –ü–û–î–î–ï–†–ñ–ö–£</b>\n\n"
        
        text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ. –í–∫–ª—é—á–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n"
        
        text += "‚Ä¢ –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
        text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è VPN\n"
        text += "‚Ä¢ –¢–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n"
        text += "‚Ä¢ –ö–æ–≥–¥–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞\n"
        text += "‚Ä¢ –ß—Ç–æ –≤—ã —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è\n\n"
        
        text += "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É.\n\n"
        
        text += "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ:</b>"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_callback_keyboard("support:cancel")
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error starting new ticket: {e}")
        await state.clear()
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "support:my_tickets")
async def on_my_tickets_button(callback: CallbackQuery, user: User):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tickets = await Ticket.get_by_user_id(user.user_id)
        
        if not tickets:
            await callback.message.edit_text(
                "üìã <b>–ú–û–ò –û–ë–†–ê–©–ï–ù–ò–Ø</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –∏ –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º.",
                reply_markup=get_support_keyboard()
            )
            await callback.answer()
            return
        
        text = "üìã <b>–ú–û–ò –û–ë–†–ê–©–ï–ù–ò–Ø</b>\n\n"
        
        for i, ticket in enumerate(tickets[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–±—Ä–∞—â–µ–Ω–∏–π
            status_emoji = "üü¢" if ticket.status == "open" else "üî¥" if ticket.status == "closed" else "üü°"
            status_text = "–û—Ç–∫—Ä—ã—Ç–æ" if ticket.status == "open" else "–ó–∞–∫—Ä—ã—Ç–æ" if ticket.status == "closed" else "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
            created_at = ticket.created_at.strftime("%d.%m.%Y %H:%M")
            
            text += f"{i}. <b>–û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket.ticket_id}</b> {status_emoji}\n"
            text += f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {created_at}\n"
            text += f"üìå –°—Ç–∞—Ç—É—Å: {status_text}\n"
            text += f"üìù –¢–µ–º–∞: {ticket.subject[:30]}{'...' if len(ticket.subject) > 30 else ''}\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ."
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
        ticket_buttons = []
        for ticket in tickets[:5]:
            ticket_buttons.append({
                "text": f"#{ticket.ticket_id} - {ticket.subject[:20]}...",
                "callback_data": f"ticket:{ticket.ticket_id}"
            })
        
        await callback.message.edit_text(
            text,
            reply_markup=get_support_ticket_keyboard(ticket_buttons)
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error showing user tickets: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏–π", show_alert=True)


@router.callback_query(F.data == "support:cancel")
async def on_cancel_button(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
    """
    try:
        current_state = await state.get_state()
        if current_state:
            await state.clear()
        
        await callback.message.edit_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_support_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error canceling ticket creation: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(SupportForm.waiting_for_message)
async def process_message(message: Message, state: FSMContext, user: User):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è
    """
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_text = message.text or message.caption or "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message_text) < 10:
            await message.answer(
                "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ "
                "(–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).",
                reply_markup=get_callback_keyboard("support:cancel")
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É –∏–∑ –ø–µ—Ä–≤—ã—Ö —Å–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è
        subject = message_text[:50] + ("..." if len(message_text) > 50 else "")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
        photo_id = None
        if message.photo:
            photo_id = message.photo[-1].file_id
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
        ticket = Ticket(
            user_id=user.user_id,
            username=user.username,
            subject=subject,
            message=message_text,
            photo_id=photo_id,
            status="open",
            created_at=datetime.now()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await ticket.save()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer(
            f"‚úÖ <b>–û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket.ticket_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            f"–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: 1-2 —á–∞—Å–∞ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.\n"
            f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—è—Ç.",
            reply_markup=get_back_to_main_keyboard()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        # –≠—Ç–æ—Ç –∫–æ–¥ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –º–æ–¥—É–ª–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        logger.info(f"New support ticket #{ticket.ticket_id} created by user {user.user_id}")
        
    except Exception as e:
        logger.error(f"Error creating ticket: {e}")
        await state.clear()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_main_keyboard()
        )


@router.callback_query(F.data.startswith("ticket:"))
async def on_ticket_selected(callback: CallbackQuery, user: User):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
    """
    try:
        ticket_id = callback.data.split(":")[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
        ticket = await Ticket.get_by_id(ticket_id)
        
        if not ticket or ticket.user_id != user.user_id:
            await callback.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        status_emoji = "üü¢" if ticket.status == "open" else "üî¥" if ticket.status == "closed" else "üü°"
        status_text = "–û—Ç–∫—Ä—ã—Ç–æ" if ticket.status == "open" else "–ó–∞–∫—Ä—ã—Ç–æ" if ticket.status == "closed" else "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        created_at = ticket.created_at.strftime("%d.%m.%Y %H:%M")
        updated_at = ticket.updated_at.strftime("%d.%m.%Y %H:%M") if ticket.updated_at else "–ù–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"
        
        text = f"üìå <b>–û–ë–†–ê–©–ï–ù–ò–ï #{ticket.ticket_id}</b> {status_emoji}\n\n"
        
        text += f"<b>–¢–µ–º–∞:</b> {ticket.subject}\n"
        text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        text += f"<b>–°–æ–∑–¥–∞–Ω–æ:</b> {created_at}\n"
        text += f"<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {updated_at}\n\n"
        
        text += f"<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{ticket.message}\n\n"
        
        if ticket.admin_reply:
            text += f"<b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n{ticket.admin_reply}\n\n"
        else:
            text += "<i>–û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏</i>\n\n"
        
        text += "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ä–µ—à–µ–Ω, –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –æ–±—Ä–∞—â–µ–Ω–∏–π."
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è
        keyboard = InlineKeyboardBuilder()
        
        if ticket.status == "open":
            keyboard.row(
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                    callback_data=f"ticket:refresh:{ticket.ticket_id}"
                ),
                InlineKeyboardButton(
                    text="üîí –ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ",
                    callback_data=f"ticket:close:{ticket.ticket_id}"
                )
            )
        
        keyboard.row(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                callback_data="support:my_tickets"
            )
        )
        
        keyboard.row(
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu"
            )
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if ticket.photo_id and not ticket.admin_reply:
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=ticket.photo_id,
                caption=text,
                reply_markup=keyboard.as_markup()
            )
        else:
            await callback.message.edit_text(
                text,
                reply_markup=keyboard.as_markup()
            )
        
        await callback.answer()
    except Exception as e:
        logger.error(f"Error showing ticket details: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –æ–±—Ä–∞—â–µ–Ω–∏—è", show_alert=True)


@router.callback_query(F.data.startswith("ticket:close:"))
async def on_close_ticket(callback: CallbackQuery, user: User):
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ
    """
    try:
        ticket_id = callback.data.split(":")[-1]
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
        ticket = await Ticket.get_by_id(ticket_id)
        
        if not ticket or ticket.user_id != user.user_id:
            await callback.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
        ticket.status = "closed"
        ticket.updated_at = datetime.now()
        await ticket.save()
        
        await callback.message.edit_text(
            f"‚úÖ <b>–û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket.ticket_id} –∑–∞–∫—Ä—ã—Ç–æ</b>\n\n"
            f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ.",
            reply_markup=get_support_keyboard()
        )
        
        await callback.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        logger.error(f"Error closing ticket: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", show_alert=True)


@router.callback_query(F.data.startswith("ticket:refresh:"))
async def on_refresh_ticket(callback: CallbackQuery, user: User):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏
    """
    try:
        ticket_id = callback.data.split(":")[-1]
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        callback.data = f"ticket:{ticket_id}"
        await on_ticket_selected(callback, user)
    except Exception as e:
        logger.error(f"Error refreshing ticket: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", show_alert=True) 